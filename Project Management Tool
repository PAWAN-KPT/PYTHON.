#Project Management Tool
project_manager/
├── project_manager/          # Django settings
├── core/                     # Main app
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── templates/core/
│   │   ├── dashboard.html
│   │   ├── project_board.html
│   │   ├── task_detail.html
│   │   ├── login.html
│   │   └── register.html
├── static/
├── db.sqlite3
└── manage.py
#models
from django.db import models
from django.contrib.auth.models import User

class Project(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    members = models.ManyToManyField(User, related_name='projects')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

class Task(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    status = models.CharField(max_length=50, choices=[('todo', 'To Do'), ('doing', 'Doing'), ('done', 'Done')])
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

class Comment(models.Model):
    task = models.ForeignKey(Task, on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    message = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'{self.user.username} on {self.task.title}'
#views
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from .models import Project, Task, Comment
from django.contrib.auth.models import User

def register_view(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = User.objects.create_user(username=username, password=password)
        login(request, user)
        return redirect('dashboard')
    return render(request, 'core/register.html')

def login_view(request):
    if request.method == 'POST':
        user = authenticate(username=request.POST['username'], password=request.POST['password'])
        if user:
            login(request, user)
            return redirect('dashboard')
    return render(request, 'core/login.html')

def logout_view(request):
    logout(request)
    return redirect('login')

@login_required
def dashboard(request):
    projects = request.user.projects.all()
    return render(request, 'core/dashboard.html', {'projects': projects})

@login_required
def create_project(request):
    if request.method == 'POST':
        name = request.POST['name']
        desc = request.POST['description']
        project = Project.objects.create(name=name, description=desc)
        project.members.add(request.user)
        return redirect('dashboard')

@login_required
def project_board(request, project_id):
    project = get_object_or_404(Project, id=project_id)
    if request.user not in project.members.all():
        return redirect('dashboard')
    tasks = Task.objects.filter(project=project)
    return render(request, 'core/project_board.html', {
        'project': project,
        'tasks': tasks,
    })

@login_required
def create_task(request, project_id):
    if request.method == 'POST':
        title = request.POST['title']
        desc = request.POST['description']
        assigned_to = User.objects.get(id=request.POST['assigned_to'])
        status = request.POST['status']
        project = get_object_or_404(Project, id=project_id)
        Task.objects.create(project=project, title=title, description=desc, assigned_to=assigned_to, status=status)
        return redirect('project_board', project_id=project.id)

@login_required
def task_detail(request, task_id):
    task = get_object_or_404(Task, id=task_id)
    comments = task.comments.all()
    if request.method == 'POST':
        msg = request.POST['comment']
        Comment.objects.create(task=task, user=request.user, message=msg)
        return redirect('task_detail', task_id=task.id)
    return render(request, 'core/task_detail.html', {
        'task': task,
        'comments': comments
    })
# URL
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('core.urls')),
]
#Templates
<h1>Welcome {{ user.username }}</h1>
<a href="{% url 'create_project' %}">New Project</a>
<ul>
  {% for project in projects %}
    <li><a href="{% url 'project_board' project.id %}">{{ project.name }}</a></li>
  {% endfor %}
</ul>
#project_html
<h2>{{ project.name }}</h2>
<form action="{% url 'create_task' project.id %}" method="POST">
  {% csrf_token %}
  <input name="title" placeholder="Task title" required>
  <textarea name="description"></textarea>
  <select name="assigned_to">
    {% for member in project.members.all %}
      <option value="{{ member.id }}">{{ member.username }}</option>
    {% endfor %}
  </select>
  <select name="status">
    <option value="todo">To Do</option>
    <option value="doing">Doing</option>
    <option value="done">Done</option>
  </select>
  <button type="submit">Add Task</button>
</form>

<h3>Tasks</h3>
{% for task in tasks %}
  <div>
    <strong>{{ task.title }}</strong> ({{ task.status }}) — Assigned to: {{ task.assigned_to.username }}
    <a href="{% url 'task_detail' task.id %}">View</a>
  </div>
{% endfor %}
#Bonus: Real-Time with Django Channels
pip install channels
ASGI_APPLICATION = 'project_manager.asgi.application'
